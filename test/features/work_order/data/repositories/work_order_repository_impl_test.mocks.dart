// Mocks generated by Mockito 5.4.6 from annotations
// in work_order_app/test/features/work_order/data/repositories/work_order_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:fpdart/fpdart.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:work_order_app/features/work_order/data/data_sources/work_order_local_data_source.dart'
    as _i2;
import 'package:work_order_app/features/work_order/data/models/technician_model.dart'
    as _i7;
import 'package:work_order_app/features/work_order/data/models/work_order_model.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [WorkOrderLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockWorkOrderLocalDataSource extends _i1.Mock
    implements _i2.WorkOrderLocalDataSource {
  MockWorkOrderLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Either<String, _i4.Unit>> addWorkOrder(
    _i5.WorkOrderModel? workOrder,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#addWorkOrder, [workOrder]),
            returnValue: _i3.Future<_i4.Either<String, _i4.Unit>>.value(
              _i6.dummyValue<_i4.Either<String, _i4.Unit>>(
                this,
                Invocation.method(#addWorkOrder, [workOrder]),
              ),
            ),
          )
          as _i3.Future<_i4.Either<String, _i4.Unit>>);

  @override
  _i3.Future<_i4.Either<String, _i4.Unit>> updateWorkOrder(
    _i5.WorkOrderModel? workOrder,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateWorkOrder, [workOrder]),
            returnValue: _i3.Future<_i4.Either<String, _i4.Unit>>.value(
              _i6.dummyValue<_i4.Either<String, _i4.Unit>>(
                this,
                Invocation.method(#updateWorkOrder, [workOrder]),
              ),
            ),
          )
          as _i3.Future<_i4.Either<String, _i4.Unit>>);

  @override
  _i3.Future<_i4.Either<String, _i4.Unit>> deleteWorkOrder(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteWorkOrder, [id]),
            returnValue: _i3.Future<_i4.Either<String, _i4.Unit>>.value(
              _i6.dummyValue<_i4.Either<String, _i4.Unit>>(
                this,
                Invocation.method(#deleteWorkOrder, [id]),
              ),
            ),
          )
          as _i3.Future<_i4.Either<String, _i4.Unit>>);

  @override
  _i3.Future<_i4.Either<String, List<_i5.WorkOrderModel>>> getAllWorkOrders() =>
      (super.noSuchMethod(
            Invocation.method(#getAllWorkOrders, []),
            returnValue:
                _i3.Future<_i4.Either<String, List<_i5.WorkOrderModel>>>.value(
                  _i6.dummyValue<_i4.Either<String, List<_i5.WorkOrderModel>>>(
                    this,
                    Invocation.method(#getAllWorkOrders, []),
                  ),
                ),
          )
          as _i3.Future<_i4.Either<String, List<_i5.WorkOrderModel>>>);

  @override
  _i3.Future<_i4.Either<String, _i4.Unit>> addTechnician(
    _i7.TechnicianModel? technician,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#addTechnician, [technician]),
            returnValue: _i3.Future<_i4.Either<String, _i4.Unit>>.value(
              _i6.dummyValue<_i4.Either<String, _i4.Unit>>(
                this,
                Invocation.method(#addTechnician, [technician]),
              ),
            ),
          )
          as _i3.Future<_i4.Either<String, _i4.Unit>>);

  @override
  _i3.Future<_i4.Either<String, List<_i7.TechnicianModel>>>
  getAllTechnicians() =>
      (super.noSuchMethod(
            Invocation.method(#getAllTechnicians, []),
            returnValue:
                _i3.Future<_i4.Either<String, List<_i7.TechnicianModel>>>.value(
                  _i6.dummyValue<_i4.Either<String, List<_i7.TechnicianModel>>>(
                    this,
                    Invocation.method(#getAllTechnicians, []),
                  ),
                ),
          )
          as _i3.Future<_i4.Either<String, List<_i7.TechnicianModel>>>);
}
